#!/bin/bash
# coccichk
# 
# Quick Description:
# Run the Linux kernel's cocinelle semantic patch checkers on a given
# source file(s) or folder. Realistically, a wrapper over spatch.
#
# Last Updated : 03Feb2019
# Created      : 23Aug2017
# 
# Author:
# (c) Kaiwan N Billimoria
# kaiwan -dot- billimoria -at- gmail -dot- com
# kaiwanTECH
# 
# License: MIT
name=$(basename $0)

########### Globals follow #########################
# Style: gNameOfGlobalVar

gInitMsg=\
"@@@ ${name}: WARNING! Don't blindly act on coccinelle's output @@@
@@@ False positives can and do occur. Verify your code.         @@@
@@@ (Also, it works only on C source/header files, nothing else)@@@
"
# kernel source tree location: UPDATE as required for your box
gKSRC_LOC=/lib/modules/$(uname -r)/build/
gVERBOSE=0

########### Functions follow #######################

# spatch wrapper
runcocci()
{
#echo "coccichk:runcocci(): params=$@"

[ $# -ne 1 ] && return
local cocci cmd
local SP_BASEOPTS="-D report --very-quiet --include-headers"
local msg

# If first parameter is a directory, then recursively work on all
# source files within it
if [ -d $1 ] ; then
  SP_OPTS="${SP_BASEOPTS} --dir $1"
  msg="#Folder:${1}"
else
  msg="#FILE:${1}"
fi

echo "${msg}"
# Loop over all cocci sp's (semantic patches)
for cocci in $(find ${gKSRC_LOC}/scripts/coccinelle/ -name "*.cocci")
do
 [ ${gVERBOSE} -eq 1 ] && echo "*--$(basename ${cocci})--*"
 cmd="spatch ${SP_BASEOPTS} --sp-file ${cocci} ${1}"
 [ ${gVERBOSE} -eq 1 ] && echo "--> ${cmd}"
 eval "${cmd}"
done
} # end runcocci()


##### 'main' : execution starts here #####

which spatch >/dev/null || {
  echo "${name}: coccinelle (spatch) not installed?"
  exit 1
}
[ ! -d ${gKSRC_LOC} ] && {
  echo "${name}: kernel source tree location \"${gKSRC_LOC}\" invalid?"
}

[ "$1" = "-v" -a $# -lt 2 -o "$1" != "-v" -a $# -lt 1 ] && {
  echo "Usage: ${name} [-v] <source-pathname(s)> file1 [file2] [file3] ...
  -OR-
${name} source-folder"
}

[ 0 -eq 1 ] && {
PSTAN=do_stanly
parent=$(ps -o comm= $PPID)
[ "${parent}" != "${PSTAN}" ] && {
  echo "Must run the 'coccichk' script via it's wrapper 'stanly' project only"
  echo "(Here and now, the parent is \"${parent}\")"
  exit 1
}
}

# Check for the optional verbose switch
[ "$1" = "-v" ] && {
 gVERBOSE=1
 shift
}

echo "${gInitMsg}"

# TODO - handle ^C ^\ properly; kill all spatch processes

# If a folder passed as $1
if [ -d $1 ] ; then
  runcocci $1
  exit 0
fi

# If one or more files are passed, or a wildcard..
for fname in "$@"
do
  #echo "////////// fname = ${fname}"
  file ${fname} |egrep -q "C source" || {
    echo "${name}: skipping ${fname} .."
	continue
  }
    # RELOOK: will spatch play nicely with C++ ?? As of now, we don't process it

  [ ! -f ${fname} -o ! -r ${fname} ] && {
    echo "${name}: source file \"${fname}\" does not exist or unreadable?"
	continue
  }
  runcocci ${fname}
done
