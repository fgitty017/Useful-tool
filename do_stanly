#!/bin/bash
# do_stanly
#
# Quick Description:
# Tooling - static analysis tools integrator script.
# MUST be invoked via it's wrapper script 'stanly'.
#
# Tools we currently invoke on each code sub-directory:
#  <kernel>/scripts/checkpatch.pl
#  sparse
#  gcc : 'useful warnings' -W1
#  <kernel>/coccinelle, via our wrapper 'coccichk' script
#  smatch
#  flawfinder
#  cppcheck
#
# TODO ::
# [+] report file cleanup
# [ ] Tools curr not working:
#    [ ] scan-build
# [ ] make menuconfig interface
#  
# Ref: https://elinux.org/images/d/d3/Bargmann.pdf
# 
# Last Updated : 01Feb2019
# Created      : 28Dec2018
# 
# Author:
# (c) Kaiwan N Billimoria
# kaiwan -at- kaiwantech -dot- com
# License: MIT.
name=$(basename $0)
DEV=1

[ ${DEV} -eq 0 ] && {
PSTAN=stanly
parent=$(ps -o comm= $PPID)
[ "${parent}" != "${PSTAN}" ] && {
  echo "Must run the 'do_stanly' tool via it's wrapper '${PSTAN}' only"
  echo "(Here and now, the parent is \"${parent}\")"
  exit 1
}
}

########### Globals / Configs follow #########################
# Style: gNameOfGlobalVar

# UPDATE on your box!
gKSRC=/lib/modules/$(uname -r)/build/   # kernel source tree (kernel-headers)
gSMATCH_LOC=~/tools_local/smatch        # RELOOK- smatch tool location; /usr/local/bin ... ?

########### Functions follow #######################

Warn()
{
  wecho "WARNING! $@"
}

# $1 : -q => quiet mode
mkclean()
{
  [ ${KSRCTREE} -eq 1 ] && return
  local cmd="make clean"
  [ "$1" != "-q" ] && becho "[+] ${cmd}"
  eval "${cmd}" > /dev/null || Warn "*** $(pwd) : ${FUNCNAME[0]}(): cmd '${cmd}' failed"
}

# Parameter: $1 = kernel src tree root
checkpatch_check()
{
  local cmd
  pwd
  local files=$(find . -maxdepth 1 -name "*.[ch]" |tr "\n" " ")

  [ ${KSRCTREE} -eq 1 ] && \
    cmd="${1}/scripts/checkpatch.pl --root=${1} --file ${files}" || \
    cmd="${gKSRC}/scripts/checkpatch.pl --no-tree --file ${files}"
  mkclean -q
  becho "[+] checkpatch.pl: ${cmd}"
  #echo " cmd = $cmd"
  eval "${cmd}" || Warn "*** $(pwd) : ${FUNCNAME[0]}(): cmd '${cmd}' failed"
}

sparse_check()
{
  local cmd="make C=1 CHECK=\"$(which sparse)\""
  mkclean -q
  becho "[+] sparse: ${cmd}"
  eval "${cmd}" || Warn "*** $(pwd) : ${FUNCNAME[0]}(): cmd '${cmd}' failed"
}

gccwarn1_check()
{
  local cmd="make W=1"
  mkclean -q
  becho "[+] gcc : ${cmd} 'generally useful warnings'"
  eval "${cmd}" || Warn "*** $(pwd) : ${FUNCNAME[0]}(): cmd '${cmd}' failed"
}

# usually overkill
gccwarn12_check()
{
  local cmd="make W=12"
  mkclean -q
  becho "[+] gcc : ${cmd} 'possibly useful warnings'"
  eval "${cmd}" || Warn "*** $(pwd) : ${FUNCNAME[0]}(): cmd '${cmd}' failed"
}

clang_check()
{
  local cmd="make -skj20 CC=$(which clang)"
   # make: -s=silent, -k=keep-going, -j# of jobs
  mkclean -q
  becho "[+] clang: ${cmd}"
  eval "${cmd}" || Warn "*** $(pwd) : ${FUNCNAME[0]}(): cmd '${cmd}' failed"
}

# Uses a wrapper script 'coccichk'
# We expect our 'coccichk' script to be in the PATH
# (curr, it's here: /usr/local/bin/coccichk)
# $1 : -v => verbose mode
coccinelle_check()
{
  # use '-v' parameter for verbose mode
  local cmd="coccichk ."
  mkclean -q
  becho "[+] coccinelle: ${cmd}"
  echo "On $(pwd)"
  eval "${cmd}" || Warn "*** $(pwd) : ${FUNCNAME[0]}(): cmd '${cmd}' failed"
}

smatch_check()
{
 # Ref: http://smatch.sourceforge.net/
  local cmd="make CHECK=\"${gSMATCH_LOC}/smatch -p=kernel\" C=1"
  mkclean -q
  becho "[+] smatch: ${cmd}"
  eval "${cmd}" || Warn "*** $(pwd) : ${FUNCNAME[0]}(): cmd '${cmd}' failed"
}

# TODO : Not working ok; fails with:
#  "cc1: error: code model kernel does not support PIC mode" ??
scan-build_check()
{
 # Ref: https://clang-analyzer.llvm.org/scan-build.html
  mkclean -q
  local cmd="scan-build -v --use-analyzer=/usr/bin/gcc make"
  becho "[+] ${cmd}"
  eval "${cmd}" || Warn "*** $(pwd) : ${FUNCNAME[0]}(): cmd '${cmd}' failed"
}

flawfinder_check()
{
  mkclean -q
  local cmd="flawfinder --quiet *.[ch]"
  becho "[+] ${cmd}"
  echo "On $(pwd)"
  eval "${cmd}" || Warn "*** $(pwd) : ${FUNCNAME[0]}(): cmd '${cmd}' failed"
}

# $1 : -q => quiet mode
cppcheck_check()
{
  mkclean -q
  local cmd="cppcheck -v ."
  [ "$1" = "-q" ] && cmd="cppcheck -q -v ."
  becho "[+] ${cmd}"
  echo "On $(pwd)"
  eval "${cmd}" || Warn "*** $(pwd) : ${FUNCNAME[0]}(): cmd '${cmd}' failed"
  mkclean -q
}

# Another way to find defects- cross-compile the code for another arch!
# Here, for PPC64
xcc_test()
{
  mkclean -q
  local cmd="make ARCH=powerpc CROSS_COMPILE=powerpc64-linux-"
  [ "$1" = "-v" ] && cmd="make V=1 ARCH=powerpc CROSS_COMPILE=powerpc64-linux-"
  becho "[+] ${cmd}"
  #echo "On $(pwd)"
  eval "${cmd}" || Warn "*** $(pwd) : ${FUNCNAME[0]}(): cmd '${cmd}' failed"
  mkclean -q
}

# $1 : code folder to check
run_checkers()
{
  #echo "run_checkers(): PFX = ${PFX}"
  # In a sub-shell
  (   
  cd $1
  wecho "$(pwd)"
  mkclean -q
  [ ${KSRCTREE} -eq 0 ] && ls -l | sed '1d'
  echo
  checkpatch_check ${KTREEROOT}
  echo
  sparse_check
  echo
  gccwarn1_check
  #echo
  #gccwarn12_check   # overkill
  echo
  clang_check
  #echo
  #scan-build_check
  echo
  coccinelle_check
  echo
  [ ${SKIP_SMATCH} -eq 0 ] && {
    smatch_check
    echo
  }
  flawfinder_check
  echo
  cppcheck_check -q
  echo
  [ ${SKIP_XCC} -eq 0 ] && xcc_test
  ) # sub-shell end
}

tools_check()
{
 becho "[+] Checking tools availability..."

 [ ! -d ${gKSRC} ] && {
   echo "${name}: kernel source tree / kernel-headers not available? Pl install"
   exit 1
 }
 which gcc >/dev/null || {
   echo "${name}: 'gcc' missing, pl install"
   exit 1
 }
 which clang >/dev/null || {
   echo "${name}: 'clang' missing, pl install"
   exit 1
 }
 which sparse >/dev/null || {
   echo "${name}: 'sparse' missing, pl install"
   exit 1
 }

 # Coccinelle
 which spatch >/dev/null || {
   echo "${name}: 'spatch' missing, pl install the 'coccinelle' package"
   exit 1
 }
 # TODO : 'coccichk' to be installed into /usr/local/bin (or ~/bin) on first run
 which coccichk >/dev/null || {
   echo "${name}: (local) <...>/stanly/coccichk wrapper script missing (or not in PATH), pl install"
   echo "Tip: sudo cp <...>/stanly/coccichk /usr/local/bin
and add /usr/local/bin to the PATH env var"
   exit 1
 }

 SKIP_SMATCH=0
 [ ! -f ${gSMATCH_LOC}/smatch ] && {
   Warn "${name}: (local) 'smatch' tool missing, pl install;
 [smatch-check() will be skipped]"
   SKIP_SMATCH=1
 }

 which flawfinder >/dev/null || {
   echo "${name}: 'flawfinder' missing, pl install"
   exit 1
 }
 which cppcheck >/dev/null || {
   echo "${name}: 'cppcheck' missing, pl install"
   exit 1
 }

 SKIP_XCC=0
 which powerpc64-linux-gcc >/dev/null || {
   Warn "${name}: 'powerpc64-linux-gcc' missing, pl install PPC64 cross-compiler"
   SKIP_XCC=1
 }
 echo " [.] OK"
}

start()
{
gSRC=$1

IFS=$'\n'; set -f
for d in $(find ${gSRC} -type d \
 -not -path "*.git*" -not -path "*.tmp_versions" -not -path "*tools") # RELOOK: why not 'tools*'?
do
  #echo "In $d:"
  [ ! -f $d/Makefile ] && {
    aecho "[!] Skipping '$d', no Makefile..."
    continue
  }
  echo "-----------------------------------------------------------"
  wecho "$(date)"
  run_checkers $d
  echo
done

unset IFS; set +f
}


##### 'main' #####

PFX=$(dirname $(which $0))    # dir in which 'stanly' and tools reside
source ${PFX}/common.sh || {
 echo "${name}: fatal: could not source ${PFX}/common.sh , aborting..."
 exit 1
}

techo "<<<<<<<<<<<<<<<< stanly : a static analysis tool integrator >>>>>>>>>>>>>>>>"
KSRCTREE=$2   # passed from our 'stanly' wrapper
[ ${KSRCTREE} -eq 1 ] && KTREEROOT=$3   # passed from our 'stanly' wrapper
tools_check
start ${1}
echo "|- End Run : $(date) -|"
