#!/bin/bash
# do_stanly
#
# Quick Description:
# Tooling - static analysis tools integrator script.
# MUST be invoked via it's wrapper script 'stanly'.
#
# Tools we currently invoke on each code sub-directory:
#  <kernel>/scripts/checkpatch.pl
#  sparse
#  gcc : 'useful warnings' -W1
#  <kernel>/coccinelle, via our wrapper 'coccichk' script
#  smatch
#  flawfinder
#  cppcheck
#
# TODO ::
# [+] report file cleanup
# [ ] Tools curr not working:
#    [ ] scan-build
# [ ] More static analysers for ksrc tree !?
# $ make help
# Static analysers:
# [ ] checkstack      - Generate a list of stack hogs
# [ ] namespacecheck  - Name space analysis on compiled kernel
# [ ] versioncheck    - Sanity check on version.h usage
# [ ] includecheck    - Check for duplicate included header files
# [ ] export_report   - List the usages of all exported symbols
# [ ] headers_check   - Sanity check on exported headers
# [ ] headerdep       - Detect inclusion cycles in headers
# [+]  coccicheck      - Check with Coccinelle
# 
#
# [ ] make menuconfig interface
#  
# Ref: https://elinux.org/images/d/d3/Bargmann.pdf
# 
# Last Updated : 01Feb2019
# Created      : 28Dec2018
# 
# Author:
# (c) Kaiwan N Billimoria
# kaiwan -at- kaiwantech -dot- com
# License: MIT.
name=$(basename $0)
DEV=1

[ ${DEV} -eq 0 ] && {
PSTAN=stanly
parent=$(ps -o comm= $PPID)
[ "${parent}" != "${PSTAN}" ] && {
  echo "Must run the 'do_stanly' tool via it's wrapper '${PSTAN}' only"
  echo "(Here and now, the parent is \"${parent}\")"
  exit 1
}
}

########### Globals / Configs follow #########################
# Style: gNameOfGlobalVar

# UPDATE on your box!
gKSRC=/lib/modules/$(uname -r)/build/   # kernel source tree (kernel-headers)
gSMATCH_LOC=~/tools_local/smatch        # RELOOK- smatch tool location; /usr/local/bin ... ?

FAILURE_MSG="returned a 'fail' value"

########### Functions follow #######################

Warn()
{
  wecho "WARNING! $@"
}

# $1 : -q => quiet mode
mkclean()
{
  [ ${KSRCTREE_MODE} -eq 1 ] && {
   [ "$1" != "-q" ] && echo " No 'make clean' in kernel src tree mode"
   return
  }
  local cmd="make clean"
  [ "$1" != "-q" ] && becho "[+] ${cmd}"
  eval "${cmd}" > /dev/null || Warn "*** $(pwd) : ${FUNCNAME[0]}(): cmd '${cmd}' ${FAILURE_MSG}"
}

checkpatch_check()
{
  local cmd
  pwd
  # We do have to recurse here! Only the 'make <target>' targets auto-recurse
  local files=$(find . -name "*.[ch]" |tr "\n" " ")
  #local files=$(find . -maxdepth 1 -name "*.[ch]" |tr "\n" " ")
  local numfiles=$(echo ${files}|wc -w)

  becho "${CMD_MSGPFX}" ; echo " Tool # ${1}"
  [ ${KSRCTREE_MODE} -eq 1 ] &&
    cmd="${KTREEROOT}/scripts/checkpatch.pl --root=${KTREEROOT} --file ${files}" || \
    cmd="${gKSRC}/scripts/checkpatch.pl --no-tree --file ${files}"
  mkclean -q
  becho "[+] checkpatch.pl: ${cmd}
# of files to process: ${numfiles}"
  #echo " cmd = $cmd"
  eval "${cmd}" || Warn "*** $(pwd) : ${FUNCNAME[0]}(): cmd '${cmd}' ${FAILURE_MSG}"
}

sparse_check()
{
  local cmd
  mkclean -q

  becho "${CMD_MSGPFX}" ; echo " Tool # ${1}"
  [ ${KSRCTREE_MODE} -eq 1 ] && {
   # '$(pwd)/' : the ending '/' is critical!
   cmd="make C=1 CHECK=\"$(which sparse)\" $(pwd)/"
   becho "[+] sparse: ${cmd}"
   (
   cd ${KTREEROOT}
   eval "${cmd}" || Warn "*** $(pwd) : ${FUNCNAME[0]}(): cmd '${cmd}' ${FAILURE_MSG}"
   )
  } || {
   cmd="make C=1 CHECK=\"$(which sparse)\""
   becho "[+] sparse: ${cmd}"
   eval "${cmd}" || Warn "*** $(pwd) : ${FUNCNAME[0]}(): cmd '${cmd}' ${FAILURE_MSG}"
  }
}

gccwarn1_check()
{
  local cmd
  mkclean -q

  becho "${CMD_MSGPFX}" ; echo " Tool # ${1}"
  [ ${KSRCTREE_MODE} -eq 1 ] && {
   cmd="make W=1 $(pwd)/"
   becho "[+] gcc : ${cmd} : 'generally useful warnings'"
   #pwd
   (
   cd ${KTREEROOT}
   #pwd
   eval "${cmd}" || Warn "*** $(pwd) : ${FUNCNAME[0]}(): cmd '${cmd}' returned a 'fail' value"
   )
  } || {
   cmd="make W=1"
   becho "[+] gcc : ${cmd} 'generally useful warnings'"
   eval "${cmd}" || Warn "*** $(pwd) : ${FUNCNAME[0]}(): cmd '${cmd}' returned a 'fail' value"
  }
}

# usually overkill
gccwarn12_check()
{
  local cmd="make W=12"
  becho "${CMD_MSGPFX}" ; echo " Tool # ${1}"
  mkclean -q
  becho "[+] gcc : ${cmd} 'possibly useful warnings'"
  eval "${cmd}" || Warn "*** $(pwd) : ${FUNCNAME[0]}(): cmd '${cmd}' ${FAILURE_MSG}"
}

clang_check()
{
  local cmd="make -skj20 CC=$(which clang)"
   # make: -s=silent, -k=keep-going, -j# of jobs
  becho "${CMD_MSGPFX}" ; echo " Tool # ${1}"
  mkclean -q
  becho "[+] clang: ${cmd}"
  eval "${cmd}" || Warn "*** $(pwd) : ${FUNCNAME[0]}(): cmd '${cmd}' ${FAILURE_MSG}"
}

# Uses a wrapper script 'coccichk'
# We expect our 'coccichk' script to be in the PATH
# (curr, it's here: /usr/local/bin/coccichk)
# $1 : -v => verbose mode
coccinelle_check()
{
  # use '-v' parameter for verbose mode
  local cmd="coccichk $(pwd)/"
  becho "${CMD_MSGPFX}" ; echo " Tool # ${1}"
  mkclean -q
  becho "[+] coccinelle: ${cmd}"
  echo " coccichk location: $(which coccichk)"
  echo "On $(pwd)"
  eval "${cmd}" || Warn "*** $(pwd) : ${FUNCNAME[0]}(): cmd '${cmd}' ${FAILURE_MSG}"
}

smatch_check()
{
 # Ref: http://smatch.sourceforge.net/
  local cmd="make CHECK=\"${gSMATCH_LOC}/smatch -p=kernel\" C=1"
  becho "${CMD_MSGPFX}" ; echo " Tool # ${1}"
  mkclean -q
  becho "[+] smatch: ${cmd}"
  eval "${cmd}" || Warn "*** $(pwd) : ${FUNCNAME[0]}(): cmd '${cmd}' ${FAILURE_MSG}"
}

# TODO : Not working ok; fails with:
#  "cc1: error: code model kernel does not support PIC mode" ??
scan-build_check()
{
  becho "${CMD_MSGPFX}" ; echo " Tool # ${1}"
 # Ref: https://clang-analyzer.llvm.org/scan-build.html
  mkclean -q
  local cmd="scan-build -v --use-analyzer=/usr/bin/gcc make"
  becho "[+] ${cmd}"
  eval "${cmd}" || Warn "*** $(pwd) : ${FUNCNAME[0]}(): cmd '${cmd}' ${FAILURE_MSG}"
}

flawfinder_check()
{
  mkclean -q
  local cmd="flawfinder --quiet *.[ch]"
  becho "${CMD_MSGPFX}" ; echo " Tool # ${1}"
  becho "[+] ${cmd}"
  echo "On $(pwd)"
  eval "${cmd}" || Warn "*** $(pwd) : ${FUNCNAME[0]}(): cmd '${cmd}' ${FAILURE_MSG}"
}

# $1 : -q => quiet mode [optional]
# $2 : tool number
cppcheck_check()
{
  local tooln=$1
  mkclean -q
  local cmd="cppcheck -v ."
  [ $# -eq 2 -a "$1" = "-q" ] && {
    cmd="cppcheck -q -v ." ; tooln=$2
  }
  becho "${CMD_MSGPFX}" ; echo " Tool # ${tooln}"
  becho "[+] ${cmd}"
  echo "On $(pwd)"
  eval "${cmd}" || Warn "*** $(pwd) : ${FUNCNAME[0]}(): cmd '${cmd}' ${FAILURE_MSG}"
  mkclean -q
}

# Another way to find defects- cross-compile the code for another arch!
# Here, for PPC64
xcc_test()
{
  mkclean -q
  local cmd="make ARCH=powerpc CROSS_COMPILE=powerpc64-linux-"
  [ "$1" = "-v" ] && cmd="make V=1 ARCH=powerpc CROSS_COMPILE=powerpc64-linux-"
  becho "${CMD_MSGPFX}" ; echo " Tool # ${1}"
  becho "[+] ${cmd}"
  #echo "On $(pwd)"
  eval "${cmd}" || Warn "*** $(pwd) : ${FUNCNAME[0]}(): cmd '${cmd}' ${FAILURE_MSG}"
  mkclean -q
}

# $1 : code folder to check
run_checkers()
{
  #echo "run_checkers(): PFX = ${PFX}"
  # In a sub-shell
  (   
  local toolnum=1

  cd $1
  wecho "$(pwd)"
  mkclean -q
  [ ${KSRCTREE_MODE} -eq 0 ] && ls -l | sed '1d'

  echo
  checkpatch_check ${toolnum}
  let toolnum=toolnum+1

  echo
  sparse_check ${toolnum}
  let toolnum=toolnum+1

  echo
  gccwarn1_check ${toolnum}
  let toolnum=toolnum+1

  echo
  #gccwarn12_check ${toolnum}  # overkill
  #let toolnum=toolnum+1

  #echo
  #clang_check ${toolnum}
  #let toolnum=toolnum+1

  #echo
  #scan-build_check ${toolnum}
  #let toolnum=toolnum+1

  echo
  coccinelle_check ${toolnum}
  let toolnum=toolnum+1

  echo
  [ ${SKIP_SMATCH} -eq 0 ] && {
    smatch_check ${toolnum}
    let toolnum=toolnum+1
    echo
  }

  flawfinder_check ${toolnum}
  let toolnum=toolnum+1

  echo
  cppcheck_check -q ${toolnum}
  let toolnum=toolnum+1

  echo
  [ ${SKIP_XCC} -eq 0 ] && {
    xcc_test ${toolnum}
    let toolnum=toolnum+1
  }

  becho "Total tool runs: $((${toolnum}-1))"
  ) # sub-shell end
}

start_analysis()
{
local dir

# For out-of-tree kernel module code, recursively iterate over each dir
[ ${KSRCTREE_MODE} -eq 0 ] && {
for dir in $(find ${gSRC} -type d \
 -not -path "*.git*" -not -path "*.tmp_versions" -not -path "*tools") # RELOOK: why not 'tools*'?
do
  #echo "In $dir:"
  [ ! -f $dir/Makefile ] && {
    aecho "[!] Skipping '$dir', no Makefile..."
    continue
  }
  echo "-----------------------------------------------------------"
  wecho "$(date)"
  run_checkers $dir
  echo
done
} ||  {
# kernel-src-tree mode; the kbuild framework is a recursive one!
 echo "-----------------------------------------------------------"
 wecho "$(date)"
 run_checkers ${gSRC}
}
}

tools_check()
{
 becho "[+] Checking tools availability..."

 [ ! -d ${gKSRC} ] && {
   echo "${name}: kernel source tree / kernel-headers not available? Pl install"
   exit 1
 }
 which gcc >/dev/null || {
   echo "${name}: 'gcc' missing, pl install"
   exit 1
 }
 which clang >/dev/null || {
   echo "${name}: 'clang' missing, pl install"
   exit 1
 }
 which sparse >/dev/null || {
   echo "${name}: 'sparse' missing, pl install"
   exit 1
 }

 # Coccinelle
 which spatch >/dev/null || {
   echo "${name}: 'spatch' missing, pl install the 'coccinelle' package"
   exit 1
 }
 # 'coccichk' to be installed into /usr/local/bin (or ~/bin) on first run
 echo "coccichk location: $(which coccichk)"
 which coccichk >/dev/null || {
   echo "${name}: (local) <...>/stanly/coccichk wrapper script missing (or not in PATH), will install now..."
   #echo "Tip: sudo cp <...>/stanly/coccichk /usr/local/bin
#and add /usr/local/bin to the PATH env var"
   sudo cp ${PFX}/coccichk /usr/local/bin || exit 1
 }

 SKIP_SMATCH=0
 [ ! -f ${gSMATCH_LOC}/smatch ] && {
   Warn "${name}: (local) 'smatch' tool missing, pl install;
 [smatch-check() will be skipped]"
   SKIP_SMATCH=1
 }

 which flawfinder >/dev/null || {
   echo "${name}: 'flawfinder' missing, pl install"
   exit 1
 }
 which cppcheck >/dev/null || {
   echo "${name}: 'cppcheck' missing, pl install"
   exit 1
 }

 SKIP_XCC=0
 which powerpc64-linux-gcc >/dev/null || {
   Warn "${name}: 'powerpc64-linux-gcc' missing, pl install PPC64 cross-compiler"
   SKIP_XCC=1
 }
 echo " [.] OK"
}


##### 'main' #####
PFX=$(dirname $(which $0))    # dir in which 'stanly' and tools reside
source ${PFX}/common.sh || {
 echo "${name}: fatal: could not source ${PFX}/common.sh , aborting..."
 exit 1
}

[ $# -lt 2 ] && {
 echo "Usage: ${name}  dir-to-scan kernel-src-tree-mode[0|1] [kernel-src-tree-root]"
 echo "Tip: only invoke this script from the 'stanly' wrapper script."
 exit 1
}
# 3 parameters received; passed along by 'stanly' wrapper
#  dir-to-scan kernel-src-tree-mode[0|1] [kernel-src-tree-root]
# Keep these global.
export gSRC=$1
export KSRCTREE_MODE=$2
[ ${KSRCTREE_MODE} -eq 1 ] && export KTREEROOT=$3
[ ${KSRCTREE_MODE} -eq 1 ] &&
  CMD_MSGPFX="+---------------- kernel-src-tree mode ----------------+" ||
  CMD_MSGPFX="+---------------- out-of-tree mode ----------------+"

techo "<<<<<<<<<<<<<<<< stanly : a static analysis tool integrator >>>>>>>>>>>>>>>>"
tools_check
start_analysis
echo "|- End Run : $(date) -|"
