#!/bin/bash
# stanly
#
# Quick Description:
# Tooling - static analysis tools integrator script.
# 
# Ref: https://elinux.org/images/d/d3/Bargmann.pdf
# 
# Last Updated : 28Dec2018
# Created      : 28Dec2018
# 
# Author:
# (c) Kaiwan N Billimoria
# kaiwan -at- kaiwantech -dot- com
# 
# License: MIT.
# 
name=$(basename $0)
PFX=$(dirname `which $0`)
source ${PFX}/common.sh || {
 echo "${name}: fatal: could not source ${PFX}/common.sh , aborting..."
 exit 1
}

########### Globals follow #########################
# Style: gNameOfGlobalVar

# UPDATE on your box!
gKSRC=~/kernel/linux-4.19.4       # kernel source tree root
gSMATCH_LOC=~/tools_local/smatch  # smatch

########### Functions follow #######################

Warn()
{
  echo "$@"
}

mkclean()
{
  [ "$1" != "-q" ] && aecho "make clean"
  make clean >/dev/null || Warn "*** $(pwd) : 'make clean' failed"
}

sparse_check()
{
  wecho "sparse :"
  make C=1 CHECK="$(which sparse)" || Warn "*** $(pwd) : 'sparse' failed"
}

gccwarn1_check()
{
  mkclean -q
  wecho "gcc : make W=1 ['generally useful warnings']"
  make W=1 || Warn "*** $(pwd) : 'make W=1' failed"
}

gccwarn12_check()
{
  mkclean -q
  # usually overkill
  wecho "gcc : make W=12 ['possibly useful warnings']"
  make W=12 || Warn "*** $(pwd) : 'make W=12' failed"
}

clang_check()
{
  mkclean -q
  wecho "clang : make -skj20 CC=$(which clang)"
  make -skj20 CC=$(which clang) || Warn "*** $(pwd) : 'clang_check' failed"
}

coccinelle_check()
{
  mkclean -q
  # use '-v' parameter for verbose mode
  ${gTOP}/coccichk .
  #wecho "coccinelle : make C=1 CHECK=${gKSRC}/scripts/coccicheck)"
  #make C=1 CHECK=${gKSRC}/scripts/coccicheck || Warn "*** $(pwd) : 'coccinelle_check' failed"
}

smatch_check()
{
 # Ref: http://smatch.sourceforge.net/
  mkclean -q
  wecho "make CHECK=\"${gSMATCH_LOC}/smatch -p=kernel\" C=1"
  make CHECK="${gSMATCH_LOC}/smatch -p=kernel" C=1 || Warn "*** $(pwd) : 'smatch_check' failed"
}

check_folder()
{
  # in a sub-shell
  (   
  cd $1
  techo "$(pwd)"
  mkclean -q
  ls -l | sed '1d'
  echo

  sparse_check
  echo
  gccwarn1_check
  #echo
  #gccwarn12_check   # overkill
  echo
  clang_check
  echo
  coccinelle_check
  echo
  smatch_check
  )
}

start()
{
gSRC=$1

IFS=$'\n'; set -f
for d in $(find ${gSRC} -type d \
 -not -path "*.git*" -not -path "*.tmp_versions" -not -path "*tools")
do
  #echo "In $d:"
  [ ! -f $d/Makefile ] && continue
  becho "------------------------------------------------"
  date
  check_folder $d
  echo
done

unset IFS; set +f
}

tools_check()
{
 which sparse >/dev/null || {
   echo "${name}: 'sparse' missing, pl install"
   exit 1
 }
 [ ! -f ./coccichk ] && {
   echo "${name}: 'coccichk' helper script missing
 Tip: Run the tool from it's folder"
   exit 1
 }
 gTOP=$(pwd)
}


##### 'main' : execution starts here #####

[ $# -ne 1 ] && {
  echo "Usage: ${name} path-to-codebase-to-check"
  exit 1
}
[ ! -d $1 ] && {
  echo "${name}: path-to-codebase-to-check \"$1\" invalid?"
  exit 1
}

tools_check
start $1

exit 0
